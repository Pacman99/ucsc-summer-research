

# This file was *autogenerated* from the file Numerical Integration.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_25 = Integer(25); _sage_const_200 = Integer(200)#!/usr/bin/env sage

import sys
from sage.all import *

def trapezoid_rule(f, a, b, N):
    delta_x = (b-a)/N
    chunks = []
    for i in range(N):
        x0 = a + i*delta_x
        x1 = a + (i+_sage_const_1 )*delta_x
        chunks.append((_sage_const_1 /_sage_const_2 ) * delta_x * (f(x0) + f(x1)))
    return sum(chunks)

def simpsons_rule(f, a, b, N):
    if N%_sage_const_2  != _sage_const_0 :
        raise ValueError('N needs to be even')
    delta_x = (b-a)/N
    chunks = []
    for i in range(_sage_const_0 , N, _sage_const_2 ): # increment by 2 to run interpolation on each pair of delta x's
        x0 = a+i*delta_x
        x1 = a + (i+_sage_const_1 )*delta_x
        x2 = a + (i+_sage_const_2 )*delta_x
        chunks.append((_sage_const_1 /_sage_const_3 )*delta_x*(f(x0)+_sage_const_4 *f(x1)+f(x0)))
    return sum(chunks)

__tmp__=var("x"); f = symbolic_expression((sin(x))).function(x)
R = RealField(_sage_const_25 )
N=_sage_const_200 
a = _sage_const_0 
b = pi

T = trapezoid_rule(f,a,b,N)
S = simpsons_rule(f,a,b,N)

print("trapezoid_rule: " + str(R(T)))
print("simpsons_rule: " + str(R(S)))

